set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/custom_cmake_modules")

# #include cotire (CMake module to hep generating precompiled header to speed-up the build process)
# include(cotire)

set(FINITE_CELL_APPLICATION_COMPILE_DEFS "")
set(FINITE_CELL_APPLICATION_INCLUDE_DIRS "")

if(NOT ${BREP_APPLICATION} MATCHES ON)
    message(FATAL_ERROR "FiniteCellApplication requires BRepApplication.")
endif()

if(${ISOGEOMETRIC_APPLICATION} MATCHES ON)
    set(FINITE_CELL_APPLICATION_COMPILE_DEFS "${FINITE_CELL_APPLICATION_COMPILE_DEFS};ENABLE_FINITE_CELL_ISOGEOMETRIC")
endif()

if(${MKL_SOLVERS_APPLICATION} MATCHES ON)
    set(FINITE_CELL_APPLICATION_INCLUDE_DIRS "${FINITE_CELL_APPLICATION_INCLUDE_DIRS};${CMAKE_SOURCE_DIR}/applications/mkl_solvers_application/external_includes")
    set(FINITE_CELL_APPLICATION_COMPILE_DEFS "${FINITE_CELL_APPLICATION_COMPILE_DEFS};ENABLE_FINITE_CELL_BOOST_BINDINGS")
endif()

#######################################################################

find_package(NNLS REQUIRED)
if(${NNLS_FOUND} MATCHES TRUE)
    message("nnls is found at " ${NNLS_DIR})
    set(FINITE_CELL_APPLICATION_COMPILE_DEFS "${FINITE_CELL_APPLICATION_COMPILE_DEFS};FINITE_CELL_APPLICATION_USE_NNLS")
else()
    message("nnls is not found")
endif()

#######################################################################

######### add compilation units here
set( KRATOS_FINITE_CELL_APPLICATION_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_conditions/element_wrapper_condition.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/quad_tree_node.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/ghost_penalty_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/finite_cell_mesh_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/finite_cell_application_variables.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/finite_cell_application.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_custom_conditions_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_quadrature_utility_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_div_free_basis_utility_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_finite_cell_mesh_utility_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_finite_cell_auxiliary_utility_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_moment_fitting_utility_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_ghost_penalty_utility_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_utility_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/finite_cell_python_application.cpp
)
#######################################################################

## define library Kratos which defines the basic python interface
add_library(KratosFiniteCellApplication SHARED ${KRATOS_FINITE_CELL_APPLICATION_SOURCES})
if(MSVC)
    target_compile_options(KratosFiniteCellApplication PRIVATE /bigobj)
endif()

add_library(KratosFiniteCellApplicationDependencies INTERFACE)
target_link_libraries(KratosFiniteCellApplicationDependencies INTERFACE ${LAPACK_LIBRARIES})
IF(${NNLS_FOUND} MATCHES TRUE)
    target_link_libraries(KratosFiniteCellApplicationDependencies INTERFACE ${NNLS_LIBRARIES})
ENDIF()

target_link_libraries(KratosFiniteCellApplication PUBLIC KratosCore)
target_link_libraries(KratosFiniteCellApplication PUBLIC KratosBRepApplication)
if(${ISOGEOMETRIC_APPLICATION} MATCHES ON)
    target_link_libraries(KratosFiniteCellApplication PUBLIC KratosIsogeometricApplication)
endif()
target_link_libraries(KratosFiniteCellApplication PUBLIC KratosFiniteCellApplicationDependencies)

# expose the include directories used by this application to any external target that links with it
target_include_directories(KratosFiniteCellApplication PUBLIC ${FINITE_CELL_APPLICATION_INCLUDE_DIRS})
target_include_directories(KratosFiniteCellApplication PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_compile_definitions(KratosFiniteCellApplication PRIVATE KRATOS_CORE=IMPORT)
target_compile_definitions(KratosFiniteCellApplication PRIVATE FINITE_CELL_APPLICATION=EXPORT)
target_compile_definitions(KratosFiniteCellApplication PRIVATE BREP_APPLICATION=IMPORT)
if(${ISOGEOMETRIC_APPLICATION} MATCHES ON)
    target_compile_definitions(KratosFiniteCellApplication PUBLIC ISOGEOMETRIC_APPLICATION=IMPORT)
endif()
target_compile_definitions(KratosFiniteCellApplication PUBLIC ${FINITE_CELL_APPLICATION_COMPILE_DEFS})
set_target_properties(KratosFiniteCellApplication PROPERTIES PREFIX "")
install(TARGETS KratosFiniteCellApplication DESTINATION libs )
#######################################################################

## changing the .dll suffix to .pyd for Windows compatibility
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set_target_properties(KratosFiniteCellApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
#######################################################################

## install application's python script if required
if(${INSTALL_PYTHON_FILES} MATCHES ON)
  get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts DESTINATION applications/${CURRENT_DIR_NAME}  FILES_MATCHING PATTERN "*.py"  PATTERN ".svn" EXCLUDE)
endif(${INSTALL_PYTHON_FILES} MATCHES ON)
#######################################################################

## Add to the KratosMultiphysics Python module
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/FiniteCellApplication.py" DESTINATION KratosMultiphysics )
#######################################################################
